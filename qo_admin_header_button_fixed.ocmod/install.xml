<?xml version="1.0" encoding="utf-8"?>
<modification>
  <name>qmenu Admin Header Menu</name>
  <code>qmenu_admin_header</code>
  <version>1.0.0</version>
  <author>QO3 Automation</author>
  <link>https://qo3.local</link>

  <file path="admin/view/template/common/header.twig">
    <operation>
      <search><![CDATA[<ul class="nav navbar-nav navbar-right">]]></search>
      <add position="replace"><![CDATA[<ul class="nav navbar-nav navbar-right">
      {% if qmenu_enabled is defined and qmenu_enabled %}
      {% set has_items = qmenu_items is defined and qmenu_items %}
      <li class="dropdown qmenu-dropdown">
        <a id="qmenuDropdown" class="dropdown-toggle" href="#" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">{{ qmenu_label|default(qmenu_default_label|default('qmenu')) }} <i class="fa fa-caret-down"></i></a>
        <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="qmenuDropdown">
          {% if has_items %}
            {% for item in qmenu_items %}
          <li><a href="{{ item.href|default('#') }}"{% if item.target %} target="_blank"{% endif %}{% if item.color %} style="color: {{ item.color }};"{% endif %}>{{ item.label|default(item.href|default(item.route|default(qmenu_default_label|default('qmenu')))) }}</a></li>
            {% endfor %}
          {% else %}
          <li class="disabled"><a href="#" tabindex="-1">{{ qmenu_empty_text|default(qmenu_default_label|default('qmenu')) }}</a></li>
          {% endif %}
          <li role="separator" class="divider"></li>
          <li><a href="{{ qmenu_manage_href|default('#') }}">{{ qmenu_manage_text|default(qmenu_default_label|default('qmenu')) }}</a></li>
        </ul>
      </li>
      {% endif %}
]]></add>
    </operation>
  </file>

  <file path="admin/controller/common/header.php">
    <operation>
      <search><![CDATA[$data['stores'] = array();]]></search>
      <add position="before"><![CDATA[
    $this->load->language('extension/module/qmenu');

    $language_id = (int) $this->config->get('config_language_id');
    $default_label = $this->language->get('text_default_label');

    if ($default_label === 'text_default_label' || $default_label === '') {
        $default_label = 'qmenu';
    }

    $empty_text = $this->language->get('text_empty_menu');

    if ($empty_text === 'text_empty_menu' || $empty_text === '') {
        $empty_text = $default_label;
    }

    $data['qmenu_manage_href'] = $this->url->link('extension/module/qmenu', 'user_token=' . $this->session->data['user_token'], true);
    $manage_text = $this->language->get('text_manage_qmenu');

    if ($manage_text === 'text_manage_qmenu' || $manage_text === '') {
        $manage_text = $default_label;
    }

    $data['qmenu_manage_text'] = $manage_text;

    $default_link_definitions = [
        [
            'label_key' => 'text_link_store_settings',
            'type' => 'route',
            'route' => 'setting/store',
            'href' => '',
            'new_tab' => false
        ],
        [
            'label_key' => 'text_link_refresh_modifications',
            'type' => 'route',
            'route' => 'marketplace/modification/refresh',
            'href' => '',
            'new_tab' => false
        ],
        [
            'label_key' => 'text_link_clear_mod_log',
            'type' => 'route',
            'route' => 'marketplace/modification/clearlog',
            'href' => '',
            'new_tab' => false
        ],
        [
            'label_key' => 'text_link_error_log',
            'type' => 'route',
            'route' => 'tool/log',
            'href' => '',
            'new_tab' => false
        ]
    ];

    $data['qmenu_enabled'] = (bool) $this->config->get('module_qmenu_status');
    $data['qmenu_items'] = [];
    $data['qmenu_default_label'] = $default_label;
    $data['qmenu_empty_text'] = $empty_text;

    if ($data['qmenu_enabled']) {
        $label_setting = $this->config->get('module_qmenu_label');
        $current_label = '';

        if (is_array($label_setting)) {
            foreach ($label_setting as $value) {
                if (is_string($value) && trim($value) !== '') {
                    $current_label = trim((string) $value);
                    break;
                }
            }
        } else {
            $current_label = trim((string) $label_setting);
        }

        $data['qmenu_label'] = $current_label !== '' ? $current_label : $default_label;

        $items_setting_raw = $this->config->get('module_qmenu_items');
        $items_setting = $items_setting_raw;

        if (is_string($items_setting) && $items_setting !== '') {
            $items_setting = json_decode($items_setting, true);
        }

        if (!is_array($items_setting)) {
            $items_setting = [];
        }

        if ($items_setting_raw === null) {
            foreach ($default_link_definitions as $definition) {
                $label = $this->language->get($definition['label_key']);

                if ($label === $definition['label_key'] || $label === '') {
                    $label = $default_label;
                }

                $items_setting[] = [
                    'label' => $label,
                    'type' => $definition['type'],
                    'route' => $definition['type'] === 'route' ? ($definition['route'] ?? '') : '',
                    'href' => $definition['type'] === 'link' ? ($definition['href'] ?? '') : '',
                    'new_tab' => !empty($definition['new_tab']) ? 1 : 0,
                    'enabled' => 1
                ];
            }
        }

        $qmenu_seen = [];

        foreach ($items_setting as $qmenu_item) {
            if (!is_array($qmenu_item)) {
                continue;
            }

            if (isset($qmenu_item['enabled']) && !$qmenu_item['enabled']) {
                continue;
            }

            $item_label = '';

            if (isset($qmenu_item['label'])) {
                if (is_array($qmenu_item['label'])) {
                    foreach ($qmenu_item['label'] as $value) {
                        if (is_string($value) && trim($value) !== '') {
                            $item_label = trim($value);
                            break;
                        }
                    }
                } else {
                    $item_label = trim((string) $qmenu_item['label']);
                }
            }

            if ($item_label === '') {
                continue;
            }

            $type = isset($qmenu_item['type']) ? (string) $qmenu_item['type'] : 'link';
            $href = '';
            $unique_target = '';

            if ($type === 'link') {
                if (!empty($qmenu_item['href'])) {
                    $href = $qmenu_item['href'];
                    $unique_target = $href;
                }
            } elseif ($type === 'route') {
                if (!empty($qmenu_item['route'])) {
                    $href = $this->url->link($qmenu_item['route'], 'user_token=' . $this->session->data['user_token'], true);
                    $unique_target = $qmenu_item['route'];
                }
            } elseif ($type === 'category') {
                if (!empty($qmenu_item['category_id'])) {
                    $category_id = (int) $qmenu_item['category_id'];
                    $href = $this->url->link('catalog/category/edit', 'user_token=' . $this->session->data['user_token'] . '&category_id=' . $category_id, true);
                    $unique_target = 'category_' . $category_id;
                }
            } elseif ($type === 'product') {
                if (!empty($qmenu_item['product_id'])) {
                    $product_id = (int) $qmenu_item['product_id'];
                    $href = $this->url->link('catalog/product/edit', 'user_token=' . $this->session->data['user_token'] . '&product_id=' . $product_id, true);
                    $unique_target = 'product_' . $product_id;
                }
            } elseif ($type === 'information') {
                if (!empty($qmenu_item['information_id'])) {
                    $information_id = (int) $qmenu_item['information_id'];
                    $href = $this->url->link('catalog/information/edit', 'user_token=' . $this->session->data['user_token'] . '&information_id=' . $information_id, true);
                    $unique_target = 'information_' . $information_id;
                }
            }

            if ($href === '') {
                continue;
            }

            $unique_key = $type . '::' . $unique_target;

            if (isset($qmenu_seen[$unique_key])) {
                continue;
            }

            $qmenu_seen[$unique_key] = true;

            $color = '';

            if (isset($qmenu_item['color'])) {
                $color = trim((string) $qmenu_item['color']);

                if (!preg_match('~^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$~', $color)) {
                    $color = '';
                }
            }

            $data['qmenu_items'][] = [
                'label'  => $item_label,
                'href'   => $href,
                'target' => !empty($qmenu_item['new_tab']),
                'color'  => $color
            ];
        }

        if (!$data['qmenu_items']) {
            $data['qmenu_label'] = $data['qmenu_label'] ?? $default_label;
        }
    } else {
        $data['qmenu_label'] = $default_label;
        $items_setting_raw = $this->config->get('module_qmenu_items');

        if ($items_setting_raw === null) {
            foreach ($default_link_definitions as $definition) {
                $label = $this->language->get($definition['label_key']);

                if ($label === $definition['label_key'] || $label === '') {
                    $label = $default_label;
                }

                $data['qmenu_items'][] = [
                    'label'  => $label,
                    'href'   => $this->url->link($definition['route'], 'user_token=' . $this->session->data['user_token'], true),
                    'target' => !empty($definition['new_tab']),
                    'color'  => ''
                ];
            }
        }
    }
]]></add>
    </operation>
  </file>

  <file path="admin/view/stylesheet/stylesheet.css">
    <operation>
      <search regex="true"><![CDATA[~$~]]></search>
      <add position="before"><![CDATA[
/* qmenu admin dropdown */
.qmenu-dropdown > a {
  font-weight: 600;
  letter-spacing: 0.04em;
}

.qmenu-dropdown .dropdown-menu {
  min-width: 12rem;
}

.qmenu-dropdown .dropdown-menu > li > a {
  padding: 8px 20px;
}

.qmenu-dropdown .dropdown-menu > li.disabled > a {
  color: #999;
  pointer-events: none;
}

/* qmenu sortable styles */
.qmenu-sortable-row {
  cursor: move;
}

.qmenu-drag-handle {
  cursor: move !important;
}

.qmenu-drag-handle:hover {
  background-color: #f5f5f5;
}

.qmenu-sortable-placeholder {
  background-color: #f0f8ff;
  border: 2px dashed #007cba;
  height: 50px;
}

.qmenu-sortable-helper {
  background-color: #fff;
  border: 1px solid #ddd;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

]]></add>
    </operation>
  </file>

</modification>
